
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Admin
 * 
 */
export type Admin = {
  cpf: number
  user: string
  nome: string
  password: string
}

/**
 * Model Terminal
 * 
 */
export type Terminal = {
  id_terminal: number
  user: string
  descricao: string
  endereco: string
  admin: number
  password: string
}

/**
 * Model Cliente
 * 
 */
export type Cliente = {
  cnpj: number
  nome: string
  telefone: number
}

/**
 * Model Encomenda
 * 
 */
export type Encomenda = {
  id_encomenda: number
  descricao: string
  endereco: string
  id_cliente: number
  data_emissao: Date
  entregue: boolean
}

/**
 * Model Status
 * 
 */
export type Status = {
  count: number
  terminal: number
  encomenda: number
  data: Date
  descricao: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;

  /**
   * `prisma.terminal`: Exposes CRUD operations for the **Terminal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terminals
    * const terminals = await prisma.terminal.findMany()
    * ```
    */
  get terminal(): Prisma.TerminalDelegate<GlobalReject>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<GlobalReject>;

  /**
   * `prisma.encomenda`: Exposes CRUD operations for the **Encomenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Encomendas
    * const encomendas = await prisma.encomenda.findMany()
    * ```
    */
  get encomenda(): Prisma.EncomendaDelegate<GlobalReject>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.0.0
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Admin: 'Admin',
    Terminal: 'Terminal',
    Cliente: 'Cliente',
    Encomenda: 'Encomenda',
    Status: 'Status'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminCountOutputType
   */


  export type AdminCountOutputType = {
    terminal: number
  }

  export type AdminCountOutputTypeSelect = {
    terminal?: boolean
  }

  export type AdminCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AdminCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AdminCountOutputType
    : S extends undefined
    ? never
    : S extends AdminCountOutputTypeArgs
    ?'include' extends U
    ? AdminCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AdminCountOutputType ? AdminCountOutputType[P] : never
  } 
    : AdminCountOutputType
  : AdminCountOutputType




  // Custom InputTypes

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     * 
    **/
    select?: AdminCountOutputTypeSelect | null
  }



  /**
   * Count Type TerminalCountOutputType
   */


  export type TerminalCountOutputType = {
    status: number
  }

  export type TerminalCountOutputTypeSelect = {
    status?: boolean
  }

  export type TerminalCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TerminalCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TerminalCountOutputType
    : S extends undefined
    ? never
    : S extends TerminalCountOutputTypeArgs
    ?'include' extends U
    ? TerminalCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TerminalCountOutputType ? TerminalCountOutputType[P] : never
  } 
    : TerminalCountOutputType
  : TerminalCountOutputType




  // Custom InputTypes

  /**
   * TerminalCountOutputType without action
   */
  export type TerminalCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TerminalCountOutputType
     * 
    **/
    select?: TerminalCountOutputTypeSelect | null
  }



  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    encomenda: number
  }

  export type ClienteCountOutputTypeSelect = {
    encomenda?: boolean
  }

  export type ClienteCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClienteCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ClienteCountOutputType
    : S extends undefined
    ? never
    : S extends ClienteCountOutputTypeArgs
    ?'include' extends U
    ? ClienteCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClienteCountOutputType ? ClienteCountOutputType[P] : never
  } 
    : ClienteCountOutputType
  : ClienteCountOutputType




  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     * 
    **/
    select?: ClienteCountOutputTypeSelect | null
  }



  /**
   * Count Type EncomendaCountOutputType
   */


  export type EncomendaCountOutputType = {
    status: number
  }

  export type EncomendaCountOutputTypeSelect = {
    status?: boolean
  }

  export type EncomendaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EncomendaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EncomendaCountOutputType
    : S extends undefined
    ? never
    : S extends EncomendaCountOutputTypeArgs
    ?'include' extends U
    ? EncomendaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EncomendaCountOutputType ? EncomendaCountOutputType[P] : never
  } 
    : EncomendaCountOutputType
  : EncomendaCountOutputType




  // Custom InputTypes

  /**
   * EncomendaCountOutputType without action
   */
  export type EncomendaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EncomendaCountOutputType
     * 
    **/
    select?: EncomendaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    cpf: number | null
  }

  export type AdminSumAggregateOutputType = {
    cpf: number | null
  }

  export type AdminMinAggregateOutputType = {
    cpf: number | null
    user: string | null
    nome: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    cpf: number | null
    user: string | null
    nome: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    cpf: number
    user: number
    nome: number
    password: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    cpf?: true
  }

  export type AdminSumAggregateInputType = {
    cpf?: true
  }

  export type AdminMinAggregateInputType = {
    cpf?: true
    user?: true
    nome?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    cpf?: true
    user?: true
    nome?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    cpf?: true
    user?: true
    nome?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: Array<AdminScalarFieldEnum>
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    cpf: number
    user: string
    nome: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    cpf?: boolean
    user?: boolean
    nome?: boolean
    password?: boolean
    terminal?: boolean | TerminalFindManyArgs
    _count?: boolean | AdminCountOutputTypeArgs
  }

  export type AdminInclude = {
    terminal?: boolean | TerminalFindManyArgs
    _count?: boolean | AdminCountOutputTypeArgs
  }

  export type AdminGetPayload<
    S extends boolean | null | undefined | AdminArgs,
    U = keyof S
      > = S extends true
        ? Admin
    : S extends undefined
    ? never
    : S extends AdminArgs | AdminFindManyArgs
    ?'include' extends U
    ? Admin  & {
    [P in TrueKeys<S['include']>]:
        P extends 'terminal' ? Array < TerminalGetPayload<S['include'][P]>>  :
        P extends '_count' ? AdminCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'terminal' ? Array < TerminalGetPayload<S['select'][P]>>  :
        P extends '_count' ? AdminCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Admin ? Admin[P] : never
  } 
    : Admin
  : Admin


  type AdminCountArgs = Merge<
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }
  >

  export interface AdminDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>> : CheckSelect<T, Prisma__AdminClient<Admin | null >, Prisma__AdminClient<AdminGetPayload<T> | null >>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>> : CheckSelect<T, Prisma__AdminClient<Admin | null >, Prisma__AdminClient<AdminGetPayload<T> | null >>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `cpf`
     * const adminWithCpfOnly = await prisma.admin.findMany({ select: { cpf: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Admin>>, PrismaPromise<Array<AdminGetPayload<T>>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Find one Admin that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminClient<Admin>, Prisma__AdminClient<AdminGetPayload<T>>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    terminal<T extends TerminalFindManyArgs = {}>(args?: Subset<T, TerminalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Terminal>>, PrismaPromise<Array<TerminalGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where: AdminWhereUniqueInput
  }

  /**
   * Admin: findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin: findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter, which Admins to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The data needed to create a Admin.
     * 
    **/
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     * 
    **/
    data: Enumerable<AdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The data needed to update a Admin.
     * 
    **/
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     * 
    **/
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * The filter to search for the Admin to update in case it exists.
     * 
    **/
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     * 
    **/
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
    /**
     * Filter which Admin to delete.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin: findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = AdminFindUniqueArgsBase
      

  /**
   * Admin: findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = AdminFindFirstArgsBase
      

  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminInclude | null
  }



  /**
   * Model Terminal
   */


  export type AggregateTerminal = {
    _count: TerminalCountAggregateOutputType | null
    _avg: TerminalAvgAggregateOutputType | null
    _sum: TerminalSumAggregateOutputType | null
    _min: TerminalMinAggregateOutputType | null
    _max: TerminalMaxAggregateOutputType | null
  }

  export type TerminalAvgAggregateOutputType = {
    id_terminal: number | null
    admin: number | null
  }

  export type TerminalSumAggregateOutputType = {
    id_terminal: number | null
    admin: number | null
  }

  export type TerminalMinAggregateOutputType = {
    id_terminal: number | null
    user: string | null
    descricao: string | null
    endereco: string | null
    admin: number | null
    password: string | null
  }

  export type TerminalMaxAggregateOutputType = {
    id_terminal: number | null
    user: string | null
    descricao: string | null
    endereco: string | null
    admin: number | null
    password: string | null
  }

  export type TerminalCountAggregateOutputType = {
    id_terminal: number
    user: number
    descricao: number
    endereco: number
    admin: number
    password: number
    _all: number
  }


  export type TerminalAvgAggregateInputType = {
    id_terminal?: true
    admin?: true
  }

  export type TerminalSumAggregateInputType = {
    id_terminal?: true
    admin?: true
  }

  export type TerminalMinAggregateInputType = {
    id_terminal?: true
    user?: true
    descricao?: true
    endereco?: true
    admin?: true
    password?: true
  }

  export type TerminalMaxAggregateInputType = {
    id_terminal?: true
    user?: true
    descricao?: true
    endereco?: true
    admin?: true
    password?: true
  }

  export type TerminalCountAggregateInputType = {
    id_terminal?: true
    user?: true
    descricao?: true
    endereco?: true
    admin?: true
    password?: true
    _all?: true
  }

  export type TerminalAggregateArgs = {
    /**
     * Filter which Terminal to aggregate.
     * 
    **/
    where?: TerminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terminals to fetch.
     * 
    **/
    orderBy?: Enumerable<TerminalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TerminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terminals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terminals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terminals
    **/
    _count?: true | TerminalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TerminalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TerminalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerminalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerminalMaxAggregateInputType
  }

  export type GetTerminalAggregateType<T extends TerminalAggregateArgs> = {
        [P in keyof T & keyof AggregateTerminal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerminal[P]>
      : GetScalarType<T[P], AggregateTerminal[P]>
  }




  export type TerminalGroupByArgs = {
    where?: TerminalWhereInput
    orderBy?: Enumerable<TerminalOrderByWithAggregationInput>
    by: Array<TerminalScalarFieldEnum>
    having?: TerminalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerminalCountAggregateInputType | true
    _avg?: TerminalAvgAggregateInputType
    _sum?: TerminalSumAggregateInputType
    _min?: TerminalMinAggregateInputType
    _max?: TerminalMaxAggregateInputType
  }


  export type TerminalGroupByOutputType = {
    id_terminal: number
    user: string
    descricao: string
    endereco: string
    admin: number
    password: string
    _count: TerminalCountAggregateOutputType | null
    _avg: TerminalAvgAggregateOutputType | null
    _sum: TerminalSumAggregateOutputType | null
    _min: TerminalMinAggregateOutputType | null
    _max: TerminalMaxAggregateOutputType | null
  }

  type GetTerminalGroupByPayload<T extends TerminalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TerminalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerminalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerminalGroupByOutputType[P]>
            : GetScalarType<T[P], TerminalGroupByOutputType[P]>
        }
      >
    >


  export type TerminalSelect = {
    id_terminal?: boolean
    user?: boolean
    descricao?: boolean
    endereco?: boolean
    adm?: boolean | AdminArgs
    admin?: boolean
    password?: boolean
    status?: boolean | StatusFindManyArgs
    _count?: boolean | TerminalCountOutputTypeArgs
  }

  export type TerminalInclude = {
    adm?: boolean | AdminArgs
    status?: boolean | StatusFindManyArgs
    _count?: boolean | TerminalCountOutputTypeArgs
  }

  export type TerminalGetPayload<
    S extends boolean | null | undefined | TerminalArgs,
    U = keyof S
      > = S extends true
        ? Terminal
    : S extends undefined
    ? never
    : S extends TerminalArgs | TerminalFindManyArgs
    ?'include' extends U
    ? Terminal  & {
    [P in TrueKeys<S['include']>]:
        P extends 'adm' ? AdminGetPayload<S['include'][P]> :
        P extends 'status' ? Array < StatusGetPayload<S['include'][P]>>  :
        P extends '_count' ? TerminalCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'adm' ? AdminGetPayload<S['select'][P]> :
        P extends 'status' ? Array < StatusGetPayload<S['select'][P]>>  :
        P extends '_count' ? TerminalCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Terminal ? Terminal[P] : never
  } 
    : Terminal
  : Terminal


  type TerminalCountArgs = Merge<
    Omit<TerminalFindManyArgs, 'select' | 'include'> & {
      select?: TerminalCountAggregateInputType | true
    }
  >

  export interface TerminalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Terminal that matches the filter.
     * @param {TerminalFindUniqueArgs} args - Arguments to find a Terminal
     * @example
     * // Get one Terminal
     * const terminal = await prisma.terminal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TerminalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TerminalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Terminal'> extends True ? CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>> : CheckSelect<T, Prisma__TerminalClient<Terminal | null >, Prisma__TerminalClient<TerminalGetPayload<T> | null >>

    /**
     * Find the first Terminal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalFindFirstArgs} args - Arguments to find a Terminal
     * @example
     * // Get one Terminal
     * const terminal = await prisma.terminal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TerminalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TerminalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Terminal'> extends True ? CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>> : CheckSelect<T, Prisma__TerminalClient<Terminal | null >, Prisma__TerminalClient<TerminalGetPayload<T> | null >>

    /**
     * Find zero or more Terminals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terminals
     * const terminals = await prisma.terminal.findMany()
     * 
     * // Get first 10 Terminals
     * const terminals = await prisma.terminal.findMany({ take: 10 })
     * 
     * // Only select the `id_terminal`
     * const terminalWithId_terminalOnly = await prisma.terminal.findMany({ select: { id_terminal: true } })
     * 
    **/
    findMany<T extends TerminalFindManyArgs>(
      args?: SelectSubset<T, TerminalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Terminal>>, PrismaPromise<Array<TerminalGetPayload<T>>>>

    /**
     * Create a Terminal.
     * @param {TerminalCreateArgs} args - Arguments to create a Terminal.
     * @example
     * // Create one Terminal
     * const Terminal = await prisma.terminal.create({
     *   data: {
     *     // ... data to create a Terminal
     *   }
     * })
     * 
    **/
    create<T extends TerminalCreateArgs>(
      args: SelectSubset<T, TerminalCreateArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Create many Terminals.
     *     @param {TerminalCreateManyArgs} args - Arguments to create many Terminals.
     *     @example
     *     // Create many Terminals
     *     const terminal = await prisma.terminal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TerminalCreateManyArgs>(
      args?: SelectSubset<T, TerminalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Terminal.
     * @param {TerminalDeleteArgs} args - Arguments to delete one Terminal.
     * @example
     * // Delete one Terminal
     * const Terminal = await prisma.terminal.delete({
     *   where: {
     *     // ... filter to delete one Terminal
     *   }
     * })
     * 
    **/
    delete<T extends TerminalDeleteArgs>(
      args: SelectSubset<T, TerminalDeleteArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Update one Terminal.
     * @param {TerminalUpdateArgs} args - Arguments to update one Terminal.
     * @example
     * // Update one Terminal
     * const terminal = await prisma.terminal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TerminalUpdateArgs>(
      args: SelectSubset<T, TerminalUpdateArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Delete zero or more Terminals.
     * @param {TerminalDeleteManyArgs} args - Arguments to filter Terminals to delete.
     * @example
     * // Delete a few Terminals
     * const { count } = await prisma.terminal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TerminalDeleteManyArgs>(
      args?: SelectSubset<T, TerminalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terminals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terminals
     * const terminal = await prisma.terminal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TerminalUpdateManyArgs>(
      args: SelectSubset<T, TerminalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Terminal.
     * @param {TerminalUpsertArgs} args - Arguments to update or create a Terminal.
     * @example
     * // Update or create a Terminal
     * const terminal = await prisma.terminal.upsert({
     *   create: {
     *     // ... data to create a Terminal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Terminal we want to update
     *   }
     * })
    **/
    upsert<T extends TerminalUpsertArgs>(
      args: SelectSubset<T, TerminalUpsertArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Find one Terminal that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TerminalFindUniqueOrThrowArgs} args - Arguments to find a Terminal
     * @example
     * // Get one Terminal
     * const terminal = await prisma.terminal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TerminalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TerminalFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Find the first Terminal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalFindFirstOrThrowArgs} args - Arguments to find a Terminal
     * @example
     * // Get one Terminal
     * const terminal = await prisma.terminal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TerminalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TerminalFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TerminalClient<Terminal>, Prisma__TerminalClient<TerminalGetPayload<T>>>

    /**
     * Count the number of Terminals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalCountArgs} args - Arguments to filter Terminals to count.
     * @example
     * // Count the number of Terminals
     * const count = await prisma.terminal.count({
     *   where: {
     *     // ... the filter for the Terminals we want to count
     *   }
     * })
    **/
    count<T extends TerminalCountArgs>(
      args?: Subset<T, TerminalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerminalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Terminal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerminalAggregateArgs>(args: Subset<T, TerminalAggregateArgs>): PrismaPromise<GetTerminalAggregateType<T>>

    /**
     * Group by Terminal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerminalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerminalGroupByArgs['orderBy'] }
        : { orderBy?: TerminalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerminalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminalGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Terminal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TerminalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    adm<T extends AdminArgs = {}>(args?: Subset<T, AdminArgs>): CheckSelect<T, Prisma__AdminClient<Admin | null >, Prisma__AdminClient<AdminGetPayload<T> | null >>;

    status<T extends StatusFindManyArgs = {}>(args?: Subset<T, StatusFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Status>>, PrismaPromise<Array<StatusGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Terminal base type for findUnique actions
   */
  export type TerminalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * Filter, which Terminal to fetch.
     * 
    **/
    where: TerminalWhereUniqueInput
  }

  /**
   * Terminal: findUnique
   */
  export interface TerminalFindUniqueArgs extends TerminalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Terminal base type for findFirst actions
   */
  export type TerminalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * Filter, which Terminal to fetch.
     * 
    **/
    where?: TerminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terminals to fetch.
     * 
    **/
    orderBy?: Enumerable<TerminalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terminals.
     * 
    **/
    cursor?: TerminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terminals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terminals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terminals.
     * 
    **/
    distinct?: Enumerable<TerminalScalarFieldEnum>
  }

  /**
   * Terminal: findFirst
   */
  export interface TerminalFindFirstArgs extends TerminalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Terminal findMany
   */
  export type TerminalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * Filter, which Terminals to fetch.
     * 
    **/
    where?: TerminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terminals to fetch.
     * 
    **/
    orderBy?: Enumerable<TerminalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terminals.
     * 
    **/
    cursor?: TerminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terminals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terminals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TerminalScalarFieldEnum>
  }


  /**
   * Terminal create
   */
  export type TerminalCreateArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * The data needed to create a Terminal.
     * 
    **/
    data: XOR<TerminalCreateInput, TerminalUncheckedCreateInput>
  }


  /**
   * Terminal createMany
   */
  export type TerminalCreateManyArgs = {
    /**
     * The data used to create many Terminals.
     * 
    **/
    data: Enumerable<TerminalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Terminal update
   */
  export type TerminalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * The data needed to update a Terminal.
     * 
    **/
    data: XOR<TerminalUpdateInput, TerminalUncheckedUpdateInput>
    /**
     * Choose, which Terminal to update.
     * 
    **/
    where: TerminalWhereUniqueInput
  }


  /**
   * Terminal updateMany
   */
  export type TerminalUpdateManyArgs = {
    /**
     * The data used to update Terminals.
     * 
    **/
    data: XOR<TerminalUpdateManyMutationInput, TerminalUncheckedUpdateManyInput>
    /**
     * Filter which Terminals to update
     * 
    **/
    where?: TerminalWhereInput
  }


  /**
   * Terminal upsert
   */
  export type TerminalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * The filter to search for the Terminal to update in case it exists.
     * 
    **/
    where: TerminalWhereUniqueInput
    /**
     * In case the Terminal found by the `where` argument doesn't exist, create a new Terminal with this data.
     * 
    **/
    create: XOR<TerminalCreateInput, TerminalUncheckedCreateInput>
    /**
     * In case the Terminal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TerminalUpdateInput, TerminalUncheckedUpdateInput>
  }


  /**
   * Terminal delete
   */
  export type TerminalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
    /**
     * Filter which Terminal to delete.
     * 
    **/
    where: TerminalWhereUniqueInput
  }


  /**
   * Terminal deleteMany
   */
  export type TerminalDeleteManyArgs = {
    /**
     * Filter which Terminals to delete
     * 
    **/
    where?: TerminalWhereInput
  }


  /**
   * Terminal: findUniqueOrThrow
   */
  export type TerminalFindUniqueOrThrowArgs = TerminalFindUniqueArgsBase
      

  /**
   * Terminal: findFirstOrThrow
   */
  export type TerminalFindFirstOrThrowArgs = TerminalFindFirstArgsBase
      

  /**
   * Terminal without action
   */
  export type TerminalArgs = {
    /**
     * Select specific fields to fetch from the Terminal
     * 
    **/
    select?: TerminalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TerminalInclude | null
  }



  /**
   * Model Cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    cnpj: number | null
    telefone: number | null
  }

  export type ClienteSumAggregateOutputType = {
    cnpj: number | null
    telefone: number | null
  }

  export type ClienteMinAggregateOutputType = {
    cnpj: number | null
    nome: string | null
    telefone: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    cnpj: number | null
    nome: string | null
    telefone: number | null
  }

  export type ClienteCountAggregateOutputType = {
    cnpj: number
    nome: number
    telefone: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    cnpj?: true
    telefone?: true
  }

  export type ClienteSumAggregateInputType = {
    cnpj?: true
    telefone?: true
  }

  export type ClienteMinAggregateInputType = {
    cnpj?: true
    nome?: true
    telefone?: true
  }

  export type ClienteMaxAggregateInputType = {
    cnpj?: true
    nome?: true
    telefone?: true
  }

  export type ClienteCountAggregateInputType = {
    cnpj?: true
    nome?: true
    telefone?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which Cliente to aggregate.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: ClienteWhereInput
    orderBy?: Enumerable<ClienteOrderByWithAggregationInput>
    by: Array<ClienteScalarFieldEnum>
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    cnpj: number
    nome: string
    telefone: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect = {
    cnpj?: boolean
    nome?: boolean
    telefone?: boolean
    encomenda?: boolean | EncomendaFindManyArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type ClienteInclude = {
    encomenda?: boolean | EncomendaFindManyArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type ClienteGetPayload<
    S extends boolean | null | undefined | ClienteArgs,
    U = keyof S
      > = S extends true
        ? Cliente
    : S extends undefined
    ? never
    : S extends ClienteArgs | ClienteFindManyArgs
    ?'include' extends U
    ? Cliente  & {
    [P in TrueKeys<S['include']>]:
        P extends 'encomenda' ? Array < EncomendaGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'encomenda' ? Array < EncomendaGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Cliente ? Cliente[P] : never
  } 
    : Cliente
  : Cliente


  type ClienteCountArgs = Merge<
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }
  >

  export interface ClienteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cliente'> extends True ? CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>> : CheckSelect<T, Prisma__ClienteClient<Cliente | null >, Prisma__ClienteClient<ClienteGetPayload<T> | null >>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cliente'> extends True ? CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>> : CheckSelect<T, Prisma__ClienteClient<Cliente | null >, Prisma__ClienteClient<ClienteGetPayload<T> | null >>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `cnpj`
     * const clienteWithCnpjOnly = await prisma.cliente.findMany({ select: { cnpj: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs>(
      args?: SelectSubset<T, ClienteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cliente>>, PrismaPromise<Array<ClienteGetPayload<T>>>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs>(
      args: SelectSubset<T, ClienteCreateArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs>(
      args?: SelectSubset<T, ClienteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs>(
      args: SelectSubset<T, ClienteDeleteArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs>(
      args: SelectSubset<T, ClienteUpdateArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs>(
      args?: SelectSubset<T, ClienteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs>(
      args: SelectSubset<T, ClienteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs>(
      args: SelectSubset<T, ClienteUpsertArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Find one Cliente that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    encomenda<T extends EncomendaFindManyArgs = {}>(args?: Subset<T, EncomendaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Encomenda>>, PrismaPromise<Array<EncomendaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cliente base type for findUnique actions
   */
  export type ClienteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente: findUnique
   */
  export interface ClienteFindUniqueArgs extends ClienteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente base type for findFirst actions
   */
  export type ClienteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     * 
    **/
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * Cliente: findFirst
   */
  export interface ClienteFindFirstArgs extends ClienteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The data needed to create a Cliente.
     * 
    **/
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs = {
    /**
     * The data used to create many Clientes.
     * 
    **/
    data: Enumerable<ClienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The data needed to update a Cliente.
     * 
    **/
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs = {
    /**
     * The data used to update Clientes.
     * 
    **/
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     * 
    **/
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     * 
    **/
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
    /**
     * Filter which Cliente to delete.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs = {
    /**
     * Filter which Clientes to delete
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente: findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs = ClienteFindUniqueArgsBase
      

  /**
   * Cliente: findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs = ClienteFindFirstArgsBase
      

  /**
   * Cliente without action
   */
  export type ClienteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClienteInclude | null
  }



  /**
   * Model Encomenda
   */


  export type AggregateEncomenda = {
    _count: EncomendaCountAggregateOutputType | null
    _avg: EncomendaAvgAggregateOutputType | null
    _sum: EncomendaSumAggregateOutputType | null
    _min: EncomendaMinAggregateOutputType | null
    _max: EncomendaMaxAggregateOutputType | null
  }

  export type EncomendaAvgAggregateOutputType = {
    id_encomenda: number | null
    id_cliente: number | null
  }

  export type EncomendaSumAggregateOutputType = {
    id_encomenda: number | null
    id_cliente: number | null
  }

  export type EncomendaMinAggregateOutputType = {
    id_encomenda: number | null
    descricao: string | null
    endereco: string | null
    id_cliente: number | null
    data_emissao: Date | null
    entregue: boolean | null
  }

  export type EncomendaMaxAggregateOutputType = {
    id_encomenda: number | null
    descricao: string | null
    endereco: string | null
    id_cliente: number | null
    data_emissao: Date | null
    entregue: boolean | null
  }

  export type EncomendaCountAggregateOutputType = {
    id_encomenda: number
    descricao: number
    endereco: number
    id_cliente: number
    data_emissao: number
    entregue: number
    _all: number
  }


  export type EncomendaAvgAggregateInputType = {
    id_encomenda?: true
    id_cliente?: true
  }

  export type EncomendaSumAggregateInputType = {
    id_encomenda?: true
    id_cliente?: true
  }

  export type EncomendaMinAggregateInputType = {
    id_encomenda?: true
    descricao?: true
    endereco?: true
    id_cliente?: true
    data_emissao?: true
    entregue?: true
  }

  export type EncomendaMaxAggregateInputType = {
    id_encomenda?: true
    descricao?: true
    endereco?: true
    id_cliente?: true
    data_emissao?: true
    entregue?: true
  }

  export type EncomendaCountAggregateInputType = {
    id_encomenda?: true
    descricao?: true
    endereco?: true
    id_cliente?: true
    data_emissao?: true
    entregue?: true
    _all?: true
  }

  export type EncomendaAggregateArgs = {
    /**
     * Filter which Encomenda to aggregate.
     * 
    **/
    where?: EncomendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Encomendas to fetch.
     * 
    **/
    orderBy?: Enumerable<EncomendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EncomendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Encomendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Encomendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Encomendas
    **/
    _count?: true | EncomendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EncomendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EncomendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EncomendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EncomendaMaxAggregateInputType
  }

  export type GetEncomendaAggregateType<T extends EncomendaAggregateArgs> = {
        [P in keyof T & keyof AggregateEncomenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEncomenda[P]>
      : GetScalarType<T[P], AggregateEncomenda[P]>
  }




  export type EncomendaGroupByArgs = {
    where?: EncomendaWhereInput
    orderBy?: Enumerable<EncomendaOrderByWithAggregationInput>
    by: Array<EncomendaScalarFieldEnum>
    having?: EncomendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EncomendaCountAggregateInputType | true
    _avg?: EncomendaAvgAggregateInputType
    _sum?: EncomendaSumAggregateInputType
    _min?: EncomendaMinAggregateInputType
    _max?: EncomendaMaxAggregateInputType
  }


  export type EncomendaGroupByOutputType = {
    id_encomenda: number
    descricao: string
    endereco: string
    id_cliente: number
    data_emissao: Date
    entregue: boolean
    _count: EncomendaCountAggregateOutputType | null
    _avg: EncomendaAvgAggregateOutputType | null
    _sum: EncomendaSumAggregateOutputType | null
    _min: EncomendaMinAggregateOutputType | null
    _max: EncomendaMaxAggregateOutputType | null
  }

  type GetEncomendaGroupByPayload<T extends EncomendaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EncomendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EncomendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EncomendaGroupByOutputType[P]>
            : GetScalarType<T[P], EncomendaGroupByOutputType[P]>
        }
      >
    >


  export type EncomendaSelect = {
    id_encomenda?: boolean
    descricao?: boolean
    endereco?: boolean
    clienteID?: boolean | ClienteArgs
    id_cliente?: boolean
    data_emissao?: boolean
    status?: boolean | StatusFindManyArgs
    entregue?: boolean
    _count?: boolean | EncomendaCountOutputTypeArgs
  }

  export type EncomendaInclude = {
    clienteID?: boolean | ClienteArgs
    status?: boolean | StatusFindManyArgs
    _count?: boolean | EncomendaCountOutputTypeArgs
  }

  export type EncomendaGetPayload<
    S extends boolean | null | undefined | EncomendaArgs,
    U = keyof S
      > = S extends true
        ? Encomenda
    : S extends undefined
    ? never
    : S extends EncomendaArgs | EncomendaFindManyArgs
    ?'include' extends U
    ? Encomenda  & {
    [P in TrueKeys<S['include']>]:
        P extends 'clienteID' ? ClienteGetPayload<S['include'][P]> :
        P extends 'status' ? Array < StatusGetPayload<S['include'][P]>>  :
        P extends '_count' ? EncomendaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'clienteID' ? ClienteGetPayload<S['select'][P]> :
        P extends 'status' ? Array < StatusGetPayload<S['select'][P]>>  :
        P extends '_count' ? EncomendaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Encomenda ? Encomenda[P] : never
  } 
    : Encomenda
  : Encomenda


  type EncomendaCountArgs = Merge<
    Omit<EncomendaFindManyArgs, 'select' | 'include'> & {
      select?: EncomendaCountAggregateInputType | true
    }
  >

  export interface EncomendaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Encomenda that matches the filter.
     * @param {EncomendaFindUniqueArgs} args - Arguments to find a Encomenda
     * @example
     * // Get one Encomenda
     * const encomenda = await prisma.encomenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EncomendaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EncomendaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Encomenda'> extends True ? CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>> : CheckSelect<T, Prisma__EncomendaClient<Encomenda | null >, Prisma__EncomendaClient<EncomendaGetPayload<T> | null >>

    /**
     * Find the first Encomenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaFindFirstArgs} args - Arguments to find a Encomenda
     * @example
     * // Get one Encomenda
     * const encomenda = await prisma.encomenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EncomendaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EncomendaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Encomenda'> extends True ? CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>> : CheckSelect<T, Prisma__EncomendaClient<Encomenda | null >, Prisma__EncomendaClient<EncomendaGetPayload<T> | null >>

    /**
     * Find zero or more Encomendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Encomendas
     * const encomendas = await prisma.encomenda.findMany()
     * 
     * // Get first 10 Encomendas
     * const encomendas = await prisma.encomenda.findMany({ take: 10 })
     * 
     * // Only select the `id_encomenda`
     * const encomendaWithId_encomendaOnly = await prisma.encomenda.findMany({ select: { id_encomenda: true } })
     * 
    **/
    findMany<T extends EncomendaFindManyArgs>(
      args?: SelectSubset<T, EncomendaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Encomenda>>, PrismaPromise<Array<EncomendaGetPayload<T>>>>

    /**
     * Create a Encomenda.
     * @param {EncomendaCreateArgs} args - Arguments to create a Encomenda.
     * @example
     * // Create one Encomenda
     * const Encomenda = await prisma.encomenda.create({
     *   data: {
     *     // ... data to create a Encomenda
     *   }
     * })
     * 
    **/
    create<T extends EncomendaCreateArgs>(
      args: SelectSubset<T, EncomendaCreateArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Create many Encomendas.
     *     @param {EncomendaCreateManyArgs} args - Arguments to create many Encomendas.
     *     @example
     *     // Create many Encomendas
     *     const encomenda = await prisma.encomenda.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EncomendaCreateManyArgs>(
      args?: SelectSubset<T, EncomendaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Encomenda.
     * @param {EncomendaDeleteArgs} args - Arguments to delete one Encomenda.
     * @example
     * // Delete one Encomenda
     * const Encomenda = await prisma.encomenda.delete({
     *   where: {
     *     // ... filter to delete one Encomenda
     *   }
     * })
     * 
    **/
    delete<T extends EncomendaDeleteArgs>(
      args: SelectSubset<T, EncomendaDeleteArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Update one Encomenda.
     * @param {EncomendaUpdateArgs} args - Arguments to update one Encomenda.
     * @example
     * // Update one Encomenda
     * const encomenda = await prisma.encomenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EncomendaUpdateArgs>(
      args: SelectSubset<T, EncomendaUpdateArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Delete zero or more Encomendas.
     * @param {EncomendaDeleteManyArgs} args - Arguments to filter Encomendas to delete.
     * @example
     * // Delete a few Encomendas
     * const { count } = await prisma.encomenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EncomendaDeleteManyArgs>(
      args?: SelectSubset<T, EncomendaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Encomendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Encomendas
     * const encomenda = await prisma.encomenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EncomendaUpdateManyArgs>(
      args: SelectSubset<T, EncomendaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Encomenda.
     * @param {EncomendaUpsertArgs} args - Arguments to update or create a Encomenda.
     * @example
     * // Update or create a Encomenda
     * const encomenda = await prisma.encomenda.upsert({
     *   create: {
     *     // ... data to create a Encomenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Encomenda we want to update
     *   }
     * })
    **/
    upsert<T extends EncomendaUpsertArgs>(
      args: SelectSubset<T, EncomendaUpsertArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Find one Encomenda that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {EncomendaFindUniqueOrThrowArgs} args - Arguments to find a Encomenda
     * @example
     * // Get one Encomenda
     * const encomenda = await prisma.encomenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EncomendaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EncomendaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Find the first Encomenda that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaFindFirstOrThrowArgs} args - Arguments to find a Encomenda
     * @example
     * // Get one Encomenda
     * const encomenda = await prisma.encomenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EncomendaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EncomendaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__EncomendaClient<Encomenda>, Prisma__EncomendaClient<EncomendaGetPayload<T>>>

    /**
     * Count the number of Encomendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaCountArgs} args - Arguments to filter Encomendas to count.
     * @example
     * // Count the number of Encomendas
     * const count = await prisma.encomenda.count({
     *   where: {
     *     // ... the filter for the Encomendas we want to count
     *   }
     * })
    **/
    count<T extends EncomendaCountArgs>(
      args?: Subset<T, EncomendaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EncomendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Encomenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EncomendaAggregateArgs>(args: Subset<T, EncomendaAggregateArgs>): PrismaPromise<GetEncomendaAggregateType<T>>

    /**
     * Group by Encomenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncomendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EncomendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EncomendaGroupByArgs['orderBy'] }
        : { orderBy?: EncomendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EncomendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEncomendaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Encomenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EncomendaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clienteID<T extends ClienteArgs = {}>(args?: Subset<T, ClienteArgs>): CheckSelect<T, Prisma__ClienteClient<Cliente | null >, Prisma__ClienteClient<ClienteGetPayload<T> | null >>;

    status<T extends StatusFindManyArgs = {}>(args?: Subset<T, StatusFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Status>>, PrismaPromise<Array<StatusGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Encomenda base type for findUnique actions
   */
  export type EncomendaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * Filter, which Encomenda to fetch.
     * 
    **/
    where: EncomendaWhereUniqueInput
  }

  /**
   * Encomenda: findUnique
   */
  export interface EncomendaFindUniqueArgs extends EncomendaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Encomenda base type for findFirst actions
   */
  export type EncomendaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * Filter, which Encomenda to fetch.
     * 
    **/
    where?: EncomendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Encomendas to fetch.
     * 
    **/
    orderBy?: Enumerable<EncomendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Encomendas.
     * 
    **/
    cursor?: EncomendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Encomendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Encomendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Encomendas.
     * 
    **/
    distinct?: Enumerable<EncomendaScalarFieldEnum>
  }

  /**
   * Encomenda: findFirst
   */
  export interface EncomendaFindFirstArgs extends EncomendaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Encomenda findMany
   */
  export type EncomendaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * Filter, which Encomendas to fetch.
     * 
    **/
    where?: EncomendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Encomendas to fetch.
     * 
    **/
    orderBy?: Enumerable<EncomendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Encomendas.
     * 
    **/
    cursor?: EncomendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Encomendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Encomendas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EncomendaScalarFieldEnum>
  }


  /**
   * Encomenda create
   */
  export type EncomendaCreateArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * The data needed to create a Encomenda.
     * 
    **/
    data: XOR<EncomendaCreateInput, EncomendaUncheckedCreateInput>
  }


  /**
   * Encomenda createMany
   */
  export type EncomendaCreateManyArgs = {
    /**
     * The data used to create many Encomendas.
     * 
    **/
    data: Enumerable<EncomendaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Encomenda update
   */
  export type EncomendaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * The data needed to update a Encomenda.
     * 
    **/
    data: XOR<EncomendaUpdateInput, EncomendaUncheckedUpdateInput>
    /**
     * Choose, which Encomenda to update.
     * 
    **/
    where: EncomendaWhereUniqueInput
  }


  /**
   * Encomenda updateMany
   */
  export type EncomendaUpdateManyArgs = {
    /**
     * The data used to update Encomendas.
     * 
    **/
    data: XOR<EncomendaUpdateManyMutationInput, EncomendaUncheckedUpdateManyInput>
    /**
     * Filter which Encomendas to update
     * 
    **/
    where?: EncomendaWhereInput
  }


  /**
   * Encomenda upsert
   */
  export type EncomendaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * The filter to search for the Encomenda to update in case it exists.
     * 
    **/
    where: EncomendaWhereUniqueInput
    /**
     * In case the Encomenda found by the `where` argument doesn't exist, create a new Encomenda with this data.
     * 
    **/
    create: XOR<EncomendaCreateInput, EncomendaUncheckedCreateInput>
    /**
     * In case the Encomenda was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EncomendaUpdateInput, EncomendaUncheckedUpdateInput>
  }


  /**
   * Encomenda delete
   */
  export type EncomendaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
    /**
     * Filter which Encomenda to delete.
     * 
    **/
    where: EncomendaWhereUniqueInput
  }


  /**
   * Encomenda deleteMany
   */
  export type EncomendaDeleteManyArgs = {
    /**
     * Filter which Encomendas to delete
     * 
    **/
    where?: EncomendaWhereInput
  }


  /**
   * Encomenda: findUniqueOrThrow
   */
  export type EncomendaFindUniqueOrThrowArgs = EncomendaFindUniqueArgsBase
      

  /**
   * Encomenda: findFirstOrThrow
   */
  export type EncomendaFindFirstOrThrowArgs = EncomendaFindFirstArgsBase
      

  /**
   * Encomenda without action
   */
  export type EncomendaArgs = {
    /**
     * Select specific fields to fetch from the Encomenda
     * 
    **/
    select?: EncomendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EncomendaInclude | null
  }



  /**
   * Model Status
   */


  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    count: number | null
    terminal: number | null
    encomenda: number | null
  }

  export type StatusSumAggregateOutputType = {
    count: number | null
    terminal: number | null
    encomenda: number | null
  }

  export type StatusMinAggregateOutputType = {
    count: number | null
    terminal: number | null
    encomenda: number | null
    data: Date | null
    descricao: string | null
  }

  export type StatusMaxAggregateOutputType = {
    count: number | null
    terminal: number | null
    encomenda: number | null
    data: Date | null
    descricao: string | null
  }

  export type StatusCountAggregateOutputType = {
    count: number
    terminal: number
    encomenda: number
    data: number
    descricao: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    count?: true
    terminal?: true
    encomenda?: true
  }

  export type StatusSumAggregateInputType = {
    count?: true
    terminal?: true
    encomenda?: true
  }

  export type StatusMinAggregateInputType = {
    count?: true
    terminal?: true
    encomenda?: true
    data?: true
    descricao?: true
  }

  export type StatusMaxAggregateInputType = {
    count?: true
    terminal?: true
    encomenda?: true
    data?: true
    descricao?: true
  }

  export type StatusCountAggregateInputType = {
    count?: true
    terminal?: true
    encomenda?: true
    data?: true
    descricao?: true
    _all?: true
  }

  export type StatusAggregateArgs = {
    /**
     * Filter which Status to aggregate.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs = {
    where?: StatusWhereInput
    orderBy?: Enumerable<StatusOrderByWithAggregationInput>
    by: Array<StatusScalarFieldEnum>
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }


  export type StatusGroupByOutputType = {
    count: number
    terminal: number
    encomenda: number
    data: Date
    descricao: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect = {
    count?: boolean
    idterminal?: boolean | TerminalArgs
    terminal?: boolean
    idencomenda?: boolean | EncomendaArgs
    encomenda?: boolean
    data?: boolean
    descricao?: boolean
  }

  export type StatusInclude = {
    idterminal?: boolean | TerminalArgs
    idencomenda?: boolean | EncomendaArgs
  }

  export type StatusGetPayload<
    S extends boolean | null | undefined | StatusArgs,
    U = keyof S
      > = S extends true
        ? Status
    : S extends undefined
    ? never
    : S extends StatusArgs | StatusFindManyArgs
    ?'include' extends U
    ? Status  & {
    [P in TrueKeys<S['include']>]:
        P extends 'idterminal' ? TerminalGetPayload<S['include'][P]> :
        P extends 'idencomenda' ? EncomendaGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'idterminal' ? TerminalGetPayload<S['select'][P]> :
        P extends 'idencomenda' ? EncomendaGetPayload<S['select'][P]> :  P extends keyof Status ? Status[P] : never
  } 
    : Status
  : Status


  type StatusCountArgs = Merge<
    Omit<StatusFindManyArgs, 'select' | 'include'> & {
      select?: StatusCountAggregateInputType | true
    }
  >

  export interface StatusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Status'> extends True ? CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>> : CheckSelect<T, Prisma__StatusClient<Status | null >, Prisma__StatusClient<StatusGetPayload<T> | null >>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Status'> extends True ? CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>> : CheckSelect<T, Prisma__StatusClient<Status | null >, Prisma__StatusClient<StatusGetPayload<T> | null >>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `count`
     * const statusWithCountOnly = await prisma.status.findMany({ select: { count: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs>(
      args?: SelectSubset<T, StatusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Status>>, PrismaPromise<Array<StatusGetPayload<T>>>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs>(
      args: SelectSubset<T, StatusCreateArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs>(
      args?: SelectSubset<T, StatusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs>(
      args: SelectSubset<T, StatusDeleteArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs>(
      args: SelectSubset<T, StatusUpdateArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs>(
      args?: SelectSubset<T, StatusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs>(
      args: SelectSubset<T, StatusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs>(
      args: SelectSubset<T, StatusUpsertArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Find one Status that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Find the first Status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    idterminal<T extends TerminalArgs = {}>(args?: Subset<T, TerminalArgs>): CheckSelect<T, Prisma__TerminalClient<Terminal | null >, Prisma__TerminalClient<TerminalGetPayload<T> | null >>;

    idencomenda<T extends EncomendaArgs = {}>(args?: Subset<T, EncomendaArgs>): CheckSelect<T, Prisma__EncomendaClient<Encomenda | null >, Prisma__EncomendaClient<EncomendaGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Status base type for findUnique actions
   */
  export type StatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     * 
    **/
    where: StatusWhereUniqueInput
  }

  /**
   * Status: findUnique
   */
  export interface StatusFindUniqueArgs extends StatusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Status base type for findFirst actions
   */
  export type StatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     * 
    **/
    distinct?: Enumerable<StatusScalarFieldEnum>
  }

  /**
   * Status: findFirst
   */
  export interface StatusFindFirstArgs extends StatusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Status findMany
   */
  export type StatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * Filter, which Statuses to fetch.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Status create
   */
  export type StatusCreateArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * The data needed to create a Status.
     * 
    **/
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs = {
    /**
     * The data used to create many Statuses.
     * 
    **/
    data: Enumerable<StatusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * The data needed to update a Status.
     * 
    **/
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     * 
    **/
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs = {
    /**
     * The data used to update Statuses.
     * 
    **/
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     * 
    **/
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * The filter to search for the Status to update in case it exists.
     * 
    **/
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     * 
    **/
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
    /**
     * Filter which Status to delete.
     * 
    **/
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs = {
    /**
     * Filter which Statuses to delete
     * 
    **/
    where?: StatusWhereInput
  }


  /**
   * Status: findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs = StatusFindUniqueArgsBase
      

  /**
   * Status: findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs = StatusFindFirstArgsBase
      

  /**
   * Status without action
   */
  export type StatusArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatusInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminScalarFieldEnum: {
    cpf: 'cpf',
    user: 'user',
    nome: 'nome',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const TerminalScalarFieldEnum: {
    id_terminal: 'id_terminal',
    user: 'user',
    descricao: 'descricao',
    endereco: 'endereco',
    admin: 'admin',
    password: 'password'
  };

  export type TerminalScalarFieldEnum = (typeof TerminalScalarFieldEnum)[keyof typeof TerminalScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    cnpj: 'cnpj',
    nome: 'nome',
    telefone: 'telefone'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const EncomendaScalarFieldEnum: {
    id_encomenda: 'id_encomenda',
    descricao: 'descricao',
    endereco: 'endereco',
    id_cliente: 'id_cliente',
    data_emissao: 'data_emissao',
    entregue: 'entregue'
  };

  export type EncomendaScalarFieldEnum = (typeof EncomendaScalarFieldEnum)[keyof typeof EncomendaScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    count: 'count',
    terminal: 'terminal',
    encomenda: 'encomenda',
    data: 'data',
    descricao: 'descricao'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    cpf?: IntFilter | number
    user?: StringFilter | string
    nome?: StringFilter | string
    password?: StringFilter | string
    terminal?: TerminalListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    cpf?: SortOrder
    user?: SortOrder
    nome?: SortOrder
    password?: SortOrder
    terminal?: TerminalOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = {
    cpf?: number
  }

  export type AdminOrderByWithAggregationInput = {
    cpf?: SortOrder
    user?: SortOrder
    nome?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    cpf?: IntWithAggregatesFilter | number
    user?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type TerminalWhereInput = {
    AND?: Enumerable<TerminalWhereInput>
    OR?: Enumerable<TerminalWhereInput>
    NOT?: Enumerable<TerminalWhereInput>
    id_terminal?: IntFilter | number
    user?: StringFilter | string
    descricao?: StringFilter | string
    endereco?: StringFilter | string
    adm?: XOR<AdminRelationFilter, AdminWhereInput>
    admin?: IntFilter | number
    password?: StringFilter | string
    status?: StatusListRelationFilter
  }

  export type TerminalOrderByWithRelationInput = {
    id_terminal?: SortOrder
    user?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    adm?: AdminOrderByWithRelationInput
    admin?: SortOrder
    password?: SortOrder
    status?: StatusOrderByRelationAggregateInput
  }

  export type TerminalWhereUniqueInput = {
    id_terminal?: number
    admin?: number
  }

  export type TerminalOrderByWithAggregationInput = {
    id_terminal?: SortOrder
    user?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    admin?: SortOrder
    password?: SortOrder
    _count?: TerminalCountOrderByAggregateInput
    _avg?: TerminalAvgOrderByAggregateInput
    _max?: TerminalMaxOrderByAggregateInput
    _min?: TerminalMinOrderByAggregateInput
    _sum?: TerminalSumOrderByAggregateInput
  }

  export type TerminalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TerminalScalarWhereWithAggregatesInput>
    OR?: Enumerable<TerminalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TerminalScalarWhereWithAggregatesInput>
    id_terminal?: IntWithAggregatesFilter | number
    user?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
    admin?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
  }

  export type ClienteWhereInput = {
    AND?: Enumerable<ClienteWhereInput>
    OR?: Enumerable<ClienteWhereInput>
    NOT?: Enumerable<ClienteWhereInput>
    cnpj?: IntFilter | number
    nome?: StringFilter | string
    telefone?: IntFilter | number
    encomenda?: EncomendaListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    encomenda?: EncomendaOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = {
    cnpj?: number
  }

  export type ClienteOrderByWithAggregationInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    cnpj?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    telefone?: IntWithAggregatesFilter | number
  }

  export type EncomendaWhereInput = {
    AND?: Enumerable<EncomendaWhereInput>
    OR?: Enumerable<EncomendaWhereInput>
    NOT?: Enumerable<EncomendaWhereInput>
    id_encomenda?: IntFilter | number
    descricao?: StringFilter | string
    endereco?: StringFilter | string
    clienteID?: XOR<ClienteRelationFilter, ClienteWhereInput>
    id_cliente?: IntFilter | number
    data_emissao?: DateTimeFilter | Date | string
    status?: StatusListRelationFilter
    entregue?: BoolFilter | boolean
  }

  export type EncomendaOrderByWithRelationInput = {
    id_encomenda?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    clienteID?: ClienteOrderByWithRelationInput
    id_cliente?: SortOrder
    data_emissao?: SortOrder
    status?: StatusOrderByRelationAggregateInput
    entregue?: SortOrder
  }

  export type EncomendaWhereUniqueInput = {
    id_encomenda?: number
  }

  export type EncomendaOrderByWithAggregationInput = {
    id_encomenda?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    id_cliente?: SortOrder
    data_emissao?: SortOrder
    entregue?: SortOrder
    _count?: EncomendaCountOrderByAggregateInput
    _avg?: EncomendaAvgOrderByAggregateInput
    _max?: EncomendaMaxOrderByAggregateInput
    _min?: EncomendaMinOrderByAggregateInput
    _sum?: EncomendaSumOrderByAggregateInput
  }

  export type EncomendaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EncomendaScalarWhereWithAggregatesInput>
    OR?: Enumerable<EncomendaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EncomendaScalarWhereWithAggregatesInput>
    id_encomenda?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
    id_cliente?: IntWithAggregatesFilter | number
    data_emissao?: DateTimeWithAggregatesFilter | Date | string
    entregue?: BoolWithAggregatesFilter | boolean
  }

  export type StatusWhereInput = {
    AND?: Enumerable<StatusWhereInput>
    OR?: Enumerable<StatusWhereInput>
    NOT?: Enumerable<StatusWhereInput>
    count?: IntFilter | number
    idterminal?: XOR<TerminalRelationFilter, TerminalWhereInput>
    terminal?: IntFilter | number
    idencomenda?: XOR<EncomendaRelationFilter, EncomendaWhereInput>
    encomenda?: IntFilter | number
    data?: DateTimeFilter | Date | string
    descricao?: StringFilter | string
  }

  export type StatusOrderByWithRelationInput = {
    count?: SortOrder
    idterminal?: TerminalOrderByWithRelationInput
    terminal?: SortOrder
    idencomenda?: EncomendaOrderByWithRelationInput
    encomenda?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type StatusWhereUniqueInput = {
    count?: number
  }

  export type StatusOrderByWithAggregationInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatusScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatusScalarWhereWithAggregatesInput>
    count?: IntWithAggregatesFilter | number
    terminal?: IntWithAggregatesFilter | number
    encomenda?: IntWithAggregatesFilter | number
    data?: DateTimeWithAggregatesFilter | Date | string
    descricao?: StringWithAggregatesFilter | string
  }

  export type AdminCreateInput = {
    cpf: number
    user?: string
    nome: string
    password: string
    terminal?: TerminalCreateNestedManyWithoutAdmInput
  }

  export type AdminUncheckedCreateInput = {
    cpf: number
    user?: string
    nome: string
    password: string
    terminal?: TerminalUncheckedCreateNestedManyWithoutAdmInput
  }

  export type AdminUpdateInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    terminal?: TerminalUpdateManyWithoutAdmNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    terminal?: TerminalUncheckedUpdateManyWithoutAdmNestedInput
  }

  export type AdminCreateManyInput = {
    cpf: number
    user?: string
    nome: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type TerminalCreateInput = {
    user: string
    descricao: string
    endereco: string
    adm: AdminCreateNestedOneWithoutTerminalInput
    password: string
    status?: StatusCreateNestedManyWithoutIdterminalInput
  }

  export type TerminalUncheckedCreateInput = {
    id_terminal?: number
    user: string
    descricao: string
    endereco: string
    admin: number
    password: string
    status?: StatusUncheckedCreateNestedManyWithoutIdterminalInput
  }

  export type TerminalUpdateInput = {
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    adm?: AdminUpdateOneRequiredWithoutTerminalNestedInput
    password?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateManyWithoutIdterminalNestedInput
  }

  export type TerminalUncheckedUpdateInput = {
    id_terminal?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    admin?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    status?: StatusUncheckedUpdateManyWithoutIdterminalNestedInput
  }

  export type TerminalCreateManyInput = {
    id_terminal?: number
    user: string
    descricao: string
    endereco: string
    admin: number
    password: string
  }

  export type TerminalUpdateManyMutationInput = {
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type TerminalUncheckedUpdateManyInput = {
    id_terminal?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    admin?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    cnpj: number
    nome: string
    telefone: number
    encomenda?: EncomendaCreateNestedManyWithoutClienteIDInput
  }

  export type ClienteUncheckedCreateInput = {
    cnpj: number
    nome: string
    telefone: number
    encomenda?: EncomendaUncheckedCreateNestedManyWithoutClienteIDInput
  }

  export type ClienteUpdateInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
    encomenda?: EncomendaUpdateManyWithoutClienteIDNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
    encomenda?: EncomendaUncheckedUpdateManyWithoutClienteIDNestedInput
  }

  export type ClienteCreateManyInput = {
    cnpj: number
    nome: string
    telefone: number
  }

  export type ClienteUpdateManyMutationInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteUncheckedUpdateManyInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
  }

  export type EncomendaCreateInput = {
    descricao: string
    endereco: string
    clienteID: ClienteCreateNestedOneWithoutEncomendaInput
    data_emissao?: Date | string
    status?: StatusCreateNestedManyWithoutIdencomendaInput
    entregue?: boolean
  }

  export type EncomendaUncheckedCreateInput = {
    id_encomenda?: number
    descricao: string
    endereco: string
    id_cliente: number
    data_emissao?: Date | string
    status?: StatusUncheckedCreateNestedManyWithoutIdencomendaInput
    entregue?: boolean
  }

  export type EncomendaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    clienteID?: ClienteUpdateOneRequiredWithoutEncomendaNestedInput
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUpdateManyWithoutIdencomendaNestedInput
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaUncheckedUpdateInput = {
    id_encomenda?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    id_cliente?: IntFieldUpdateOperationsInput | number
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUncheckedUpdateManyWithoutIdencomendaNestedInput
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaCreateManyInput = {
    id_encomenda?: number
    descricao: string
    endereco: string
    id_cliente: number
    data_emissao?: Date | string
    entregue?: boolean
  }

  export type EncomendaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaUncheckedUpdateManyInput = {
    id_encomenda?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    id_cliente?: IntFieldUpdateOperationsInput | number
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StatusCreateInput = {
    count?: number
    idterminal: TerminalCreateNestedOneWithoutStatusInput
    idencomenda: EncomendaCreateNestedOneWithoutStatusInput
    data?: Date | string
    descricao: string
  }

  export type StatusUncheckedCreateInput = {
    count?: number
    terminal: number
    encomenda: number
    data?: Date | string
    descricao: string
  }

  export type StatusUpdateInput = {
    idterminal?: TerminalUpdateOneRequiredWithoutStatusNestedInput
    idencomenda?: EncomendaUpdateOneRequiredWithoutStatusNestedInput
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    terminal?: IntFieldUpdateOperationsInput | number
    encomenda?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateManyInput = {
    count?: number
    terminal: number
    encomenda: number
    data?: Date | string
    descricao: string
  }

  export type StatusUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    count?: IntFieldUpdateOperationsInput | number
    terminal?: IntFieldUpdateOperationsInput | number
    encomenda?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type TerminalListRelationFilter = {
    every?: TerminalWhereInput
    some?: TerminalWhereInput
    none?: TerminalWhereInput
  }

  export type TerminalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    cpf?: SortOrder
    user?: SortOrder
    nome?: SortOrder
    password?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    cpf?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    cpf?: SortOrder
    user?: SortOrder
    nome?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    cpf?: SortOrder
    user?: SortOrder
    nome?: SortOrder
    password?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    cpf?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type StatusListRelationFilter = {
    every?: StatusWhereInput
    some?: StatusWhereInput
    none?: StatusWhereInput
  }

  export type StatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerminalCountOrderByAggregateInput = {
    id_terminal?: SortOrder
    user?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type TerminalAvgOrderByAggregateInput = {
    id_terminal?: SortOrder
    admin?: SortOrder
  }

  export type TerminalMaxOrderByAggregateInput = {
    id_terminal?: SortOrder
    user?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type TerminalMinOrderByAggregateInput = {
    id_terminal?: SortOrder
    user?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type TerminalSumOrderByAggregateInput = {
    id_terminal?: SortOrder
    admin?: SortOrder
  }

  export type EncomendaListRelationFilter = {
    every?: EncomendaWhereInput
    some?: EncomendaWhereInput
    none?: EncomendaWhereInput
  }

  export type EncomendaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    cnpj?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    cnpj?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EncomendaCountOrderByAggregateInput = {
    id_encomenda?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    id_cliente?: SortOrder
    data_emissao?: SortOrder
    entregue?: SortOrder
  }

  export type EncomendaAvgOrderByAggregateInput = {
    id_encomenda?: SortOrder
    id_cliente?: SortOrder
  }

  export type EncomendaMaxOrderByAggregateInput = {
    id_encomenda?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    id_cliente?: SortOrder
    data_emissao?: SortOrder
    entregue?: SortOrder
  }

  export type EncomendaMinOrderByAggregateInput = {
    id_encomenda?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    id_cliente?: SortOrder
    data_emissao?: SortOrder
    entregue?: SortOrder
  }

  export type EncomendaSumOrderByAggregateInput = {
    id_encomenda?: SortOrder
    id_cliente?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TerminalRelationFilter = {
    is?: TerminalWhereInput
    isNot?: TerminalWhereInput
  }

  export type EncomendaRelationFilter = {
    is?: EncomendaWhereInput
    isNot?: EncomendaWhereInput
  }

  export type StatusCountOrderByAggregateInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    count?: SortOrder
    terminal?: SortOrder
    encomenda?: SortOrder
  }

  export type TerminalCreateNestedManyWithoutAdmInput = {
    create?: XOR<Enumerable<TerminalCreateWithoutAdmInput>, Enumerable<TerminalUncheckedCreateWithoutAdmInput>>
    connectOrCreate?: Enumerable<TerminalCreateOrConnectWithoutAdmInput>
    createMany?: TerminalCreateManyAdmInputEnvelope
    connect?: Enumerable<TerminalWhereUniqueInput>
  }

  export type TerminalUncheckedCreateNestedManyWithoutAdmInput = {
    create?: XOR<Enumerable<TerminalCreateWithoutAdmInput>, Enumerable<TerminalUncheckedCreateWithoutAdmInput>>
    connectOrCreate?: Enumerable<TerminalCreateOrConnectWithoutAdmInput>
    createMany?: TerminalCreateManyAdmInputEnvelope
    connect?: Enumerable<TerminalWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TerminalUpdateManyWithoutAdmNestedInput = {
    create?: XOR<Enumerable<TerminalCreateWithoutAdmInput>, Enumerable<TerminalUncheckedCreateWithoutAdmInput>>
    connectOrCreate?: Enumerable<TerminalCreateOrConnectWithoutAdmInput>
    upsert?: Enumerable<TerminalUpsertWithWhereUniqueWithoutAdmInput>
    createMany?: TerminalCreateManyAdmInputEnvelope
    set?: Enumerable<TerminalWhereUniqueInput>
    disconnect?: Enumerable<TerminalWhereUniqueInput>
    delete?: Enumerable<TerminalWhereUniqueInput>
    connect?: Enumerable<TerminalWhereUniqueInput>
    update?: Enumerable<TerminalUpdateWithWhereUniqueWithoutAdmInput>
    updateMany?: Enumerable<TerminalUpdateManyWithWhereWithoutAdmInput>
    deleteMany?: Enumerable<TerminalScalarWhereInput>
  }

  export type TerminalUncheckedUpdateManyWithoutAdmNestedInput = {
    create?: XOR<Enumerable<TerminalCreateWithoutAdmInput>, Enumerable<TerminalUncheckedCreateWithoutAdmInput>>
    connectOrCreate?: Enumerable<TerminalCreateOrConnectWithoutAdmInput>
    upsert?: Enumerable<TerminalUpsertWithWhereUniqueWithoutAdmInput>
    createMany?: TerminalCreateManyAdmInputEnvelope
    set?: Enumerable<TerminalWhereUniqueInput>
    disconnect?: Enumerable<TerminalWhereUniqueInput>
    delete?: Enumerable<TerminalWhereUniqueInput>
    connect?: Enumerable<TerminalWhereUniqueInput>
    update?: Enumerable<TerminalUpdateWithWhereUniqueWithoutAdmInput>
    updateMany?: Enumerable<TerminalUpdateManyWithWhereWithoutAdmInput>
    deleteMany?: Enumerable<TerminalScalarWhereInput>
  }

  export type AdminCreateNestedOneWithoutTerminalInput = {
    create?: XOR<AdminCreateWithoutTerminalInput, AdminUncheckedCreateWithoutTerminalInput>
    connectOrCreate?: AdminCreateOrConnectWithoutTerminalInput
    connect?: AdminWhereUniqueInput
  }

  export type StatusCreateNestedManyWithoutIdterminalInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdterminalInput>, Enumerable<StatusUncheckedCreateWithoutIdterminalInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdterminalInput>
    createMany?: StatusCreateManyIdterminalInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type StatusUncheckedCreateNestedManyWithoutIdterminalInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdterminalInput>, Enumerable<StatusUncheckedCreateWithoutIdterminalInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdterminalInput>
    createMany?: StatusCreateManyIdterminalInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type AdminUpdateOneRequiredWithoutTerminalNestedInput = {
    create?: XOR<AdminCreateWithoutTerminalInput, AdminUncheckedCreateWithoutTerminalInput>
    connectOrCreate?: AdminCreateOrConnectWithoutTerminalInput
    upsert?: AdminUpsertWithoutTerminalInput
    connect?: AdminWhereUniqueInput
    update?: XOR<AdminUpdateWithoutTerminalInput, AdminUncheckedUpdateWithoutTerminalInput>
  }

  export type StatusUpdateManyWithoutIdterminalNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdterminalInput>, Enumerable<StatusUncheckedCreateWithoutIdterminalInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdterminalInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutIdterminalInput>
    createMany?: StatusCreateManyIdterminalInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutIdterminalInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutIdterminalInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type StatusUncheckedUpdateManyWithoutIdterminalNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdterminalInput>, Enumerable<StatusUncheckedCreateWithoutIdterminalInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdterminalInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutIdterminalInput>
    createMany?: StatusCreateManyIdterminalInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutIdterminalInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutIdterminalInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type EncomendaCreateNestedManyWithoutClienteIDInput = {
    create?: XOR<Enumerable<EncomendaCreateWithoutClienteIDInput>, Enumerable<EncomendaUncheckedCreateWithoutClienteIDInput>>
    connectOrCreate?: Enumerable<EncomendaCreateOrConnectWithoutClienteIDInput>
    createMany?: EncomendaCreateManyClienteIDInputEnvelope
    connect?: Enumerable<EncomendaWhereUniqueInput>
  }

  export type EncomendaUncheckedCreateNestedManyWithoutClienteIDInput = {
    create?: XOR<Enumerable<EncomendaCreateWithoutClienteIDInput>, Enumerable<EncomendaUncheckedCreateWithoutClienteIDInput>>
    connectOrCreate?: Enumerable<EncomendaCreateOrConnectWithoutClienteIDInput>
    createMany?: EncomendaCreateManyClienteIDInputEnvelope
    connect?: Enumerable<EncomendaWhereUniqueInput>
  }

  export type EncomendaUpdateManyWithoutClienteIDNestedInput = {
    create?: XOR<Enumerable<EncomendaCreateWithoutClienteIDInput>, Enumerable<EncomendaUncheckedCreateWithoutClienteIDInput>>
    connectOrCreate?: Enumerable<EncomendaCreateOrConnectWithoutClienteIDInput>
    upsert?: Enumerable<EncomendaUpsertWithWhereUniqueWithoutClienteIDInput>
    createMany?: EncomendaCreateManyClienteIDInputEnvelope
    set?: Enumerable<EncomendaWhereUniqueInput>
    disconnect?: Enumerable<EncomendaWhereUniqueInput>
    delete?: Enumerable<EncomendaWhereUniqueInput>
    connect?: Enumerable<EncomendaWhereUniqueInput>
    update?: Enumerable<EncomendaUpdateWithWhereUniqueWithoutClienteIDInput>
    updateMany?: Enumerable<EncomendaUpdateManyWithWhereWithoutClienteIDInput>
    deleteMany?: Enumerable<EncomendaScalarWhereInput>
  }

  export type EncomendaUncheckedUpdateManyWithoutClienteIDNestedInput = {
    create?: XOR<Enumerable<EncomendaCreateWithoutClienteIDInput>, Enumerable<EncomendaUncheckedCreateWithoutClienteIDInput>>
    connectOrCreate?: Enumerable<EncomendaCreateOrConnectWithoutClienteIDInput>
    upsert?: Enumerable<EncomendaUpsertWithWhereUniqueWithoutClienteIDInput>
    createMany?: EncomendaCreateManyClienteIDInputEnvelope
    set?: Enumerable<EncomendaWhereUniqueInput>
    disconnect?: Enumerable<EncomendaWhereUniqueInput>
    delete?: Enumerable<EncomendaWhereUniqueInput>
    connect?: Enumerable<EncomendaWhereUniqueInput>
    update?: Enumerable<EncomendaUpdateWithWhereUniqueWithoutClienteIDInput>
    updateMany?: Enumerable<EncomendaUpdateManyWithWhereWithoutClienteIDInput>
    deleteMany?: Enumerable<EncomendaScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutEncomendaInput = {
    create?: XOR<ClienteCreateWithoutEncomendaInput, ClienteUncheckedCreateWithoutEncomendaInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutEncomendaInput
    connect?: ClienteWhereUniqueInput
  }

  export type StatusCreateNestedManyWithoutIdencomendaInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdencomendaInput>, Enumerable<StatusUncheckedCreateWithoutIdencomendaInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdencomendaInput>
    createMany?: StatusCreateManyIdencomendaInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type StatusUncheckedCreateNestedManyWithoutIdencomendaInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdencomendaInput>, Enumerable<StatusUncheckedCreateWithoutIdencomendaInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdencomendaInput>
    createMany?: StatusCreateManyIdencomendaInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type ClienteUpdateOneRequiredWithoutEncomendaNestedInput = {
    create?: XOR<ClienteCreateWithoutEncomendaInput, ClienteUncheckedCreateWithoutEncomendaInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutEncomendaInput
    upsert?: ClienteUpsertWithoutEncomendaInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutEncomendaInput, ClienteUncheckedUpdateWithoutEncomendaInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StatusUpdateManyWithoutIdencomendaNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdencomendaInput>, Enumerable<StatusUncheckedCreateWithoutIdencomendaInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdencomendaInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutIdencomendaInput>
    createMany?: StatusCreateManyIdencomendaInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutIdencomendaInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutIdencomendaInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StatusUncheckedUpdateManyWithoutIdencomendaNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutIdencomendaInput>, Enumerable<StatusUncheckedCreateWithoutIdencomendaInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutIdencomendaInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutIdencomendaInput>
    createMany?: StatusCreateManyIdencomendaInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutIdencomendaInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutIdencomendaInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type TerminalCreateNestedOneWithoutStatusInput = {
    create?: XOR<TerminalCreateWithoutStatusInput, TerminalUncheckedCreateWithoutStatusInput>
    connectOrCreate?: TerminalCreateOrConnectWithoutStatusInput
    connect?: TerminalWhereUniqueInput
  }

  export type EncomendaCreateNestedOneWithoutStatusInput = {
    create?: XOR<EncomendaCreateWithoutStatusInput, EncomendaUncheckedCreateWithoutStatusInput>
    connectOrCreate?: EncomendaCreateOrConnectWithoutStatusInput
    connect?: EncomendaWhereUniqueInput
  }

  export type TerminalUpdateOneRequiredWithoutStatusNestedInput = {
    create?: XOR<TerminalCreateWithoutStatusInput, TerminalUncheckedCreateWithoutStatusInput>
    connectOrCreate?: TerminalCreateOrConnectWithoutStatusInput
    upsert?: TerminalUpsertWithoutStatusInput
    connect?: TerminalWhereUniqueInput
    update?: XOR<TerminalUpdateWithoutStatusInput, TerminalUncheckedUpdateWithoutStatusInput>
  }

  export type EncomendaUpdateOneRequiredWithoutStatusNestedInput = {
    create?: XOR<EncomendaCreateWithoutStatusInput, EncomendaUncheckedCreateWithoutStatusInput>
    connectOrCreate?: EncomendaCreateOrConnectWithoutStatusInput
    upsert?: EncomendaUpsertWithoutStatusInput
    connect?: EncomendaWhereUniqueInput
    update?: XOR<EncomendaUpdateWithoutStatusInput, EncomendaUncheckedUpdateWithoutStatusInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TerminalCreateWithoutAdmInput = {
    user: string
    descricao: string
    endereco: string
    password: string
    status?: StatusCreateNestedManyWithoutIdterminalInput
  }

  export type TerminalUncheckedCreateWithoutAdmInput = {
    id_terminal?: number
    user: string
    descricao: string
    endereco: string
    password: string
    status?: StatusUncheckedCreateNestedManyWithoutIdterminalInput
  }

  export type TerminalCreateOrConnectWithoutAdmInput = {
    where: TerminalWhereUniqueInput
    create: XOR<TerminalCreateWithoutAdmInput, TerminalUncheckedCreateWithoutAdmInput>
  }

  export type TerminalCreateManyAdmInputEnvelope = {
    data: Enumerable<TerminalCreateManyAdmInput>
    skipDuplicates?: boolean
  }

  export type TerminalUpsertWithWhereUniqueWithoutAdmInput = {
    where: TerminalWhereUniqueInput
    update: XOR<TerminalUpdateWithoutAdmInput, TerminalUncheckedUpdateWithoutAdmInput>
    create: XOR<TerminalCreateWithoutAdmInput, TerminalUncheckedCreateWithoutAdmInput>
  }

  export type TerminalUpdateWithWhereUniqueWithoutAdmInput = {
    where: TerminalWhereUniqueInput
    data: XOR<TerminalUpdateWithoutAdmInput, TerminalUncheckedUpdateWithoutAdmInput>
  }

  export type TerminalUpdateManyWithWhereWithoutAdmInput = {
    where: TerminalScalarWhereInput
    data: XOR<TerminalUpdateManyMutationInput, TerminalUncheckedUpdateManyWithoutTerminalInput>
  }

  export type TerminalScalarWhereInput = {
    AND?: Enumerable<TerminalScalarWhereInput>
    OR?: Enumerable<TerminalScalarWhereInput>
    NOT?: Enumerable<TerminalScalarWhereInput>
    id_terminal?: IntFilter | number
    user?: StringFilter | string
    descricao?: StringFilter | string
    endereco?: StringFilter | string
    admin?: IntFilter | number
    password?: StringFilter | string
  }

  export type AdminCreateWithoutTerminalInput = {
    cpf: number
    user?: string
    nome: string
    password: string
  }

  export type AdminUncheckedCreateWithoutTerminalInput = {
    cpf: number
    user?: string
    nome: string
    password: string
  }

  export type AdminCreateOrConnectWithoutTerminalInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutTerminalInput, AdminUncheckedCreateWithoutTerminalInput>
  }

  export type StatusCreateWithoutIdterminalInput = {
    count?: number
    idencomenda: EncomendaCreateNestedOneWithoutStatusInput
    data?: Date | string
    descricao: string
  }

  export type StatusUncheckedCreateWithoutIdterminalInput = {
    count?: number
    encomenda: number
    data?: Date | string
    descricao: string
  }

  export type StatusCreateOrConnectWithoutIdterminalInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutIdterminalInput, StatusUncheckedCreateWithoutIdterminalInput>
  }

  export type StatusCreateManyIdterminalInputEnvelope = {
    data: Enumerable<StatusCreateManyIdterminalInput>
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutTerminalInput = {
    update: XOR<AdminUpdateWithoutTerminalInput, AdminUncheckedUpdateWithoutTerminalInput>
    create: XOR<AdminCreateWithoutTerminalInput, AdminUncheckedCreateWithoutTerminalInput>
  }

  export type AdminUpdateWithoutTerminalInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateWithoutTerminalInput = {
    cpf?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUpsertWithWhereUniqueWithoutIdterminalInput = {
    where: StatusWhereUniqueInput
    update: XOR<StatusUpdateWithoutIdterminalInput, StatusUncheckedUpdateWithoutIdterminalInput>
    create: XOR<StatusCreateWithoutIdterminalInput, StatusUncheckedCreateWithoutIdterminalInput>
  }

  export type StatusUpdateWithWhereUniqueWithoutIdterminalInput = {
    where: StatusWhereUniqueInput
    data: XOR<StatusUpdateWithoutIdterminalInput, StatusUncheckedUpdateWithoutIdterminalInput>
  }

  export type StatusUpdateManyWithWhereWithoutIdterminalInput = {
    where: StatusScalarWhereInput
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyWithoutStatusInput>
  }

  export type StatusScalarWhereInput = {
    AND?: Enumerable<StatusScalarWhereInput>
    OR?: Enumerable<StatusScalarWhereInput>
    NOT?: Enumerable<StatusScalarWhereInput>
    count?: IntFilter | number
    terminal?: IntFilter | number
    encomenda?: IntFilter | number
    data?: DateTimeFilter | Date | string
    descricao?: StringFilter | string
  }

  export type EncomendaCreateWithoutClienteIDInput = {
    descricao: string
    endereco: string
    data_emissao?: Date | string
    status?: StatusCreateNestedManyWithoutIdencomendaInput
    entregue?: boolean
  }

  export type EncomendaUncheckedCreateWithoutClienteIDInput = {
    id_encomenda?: number
    descricao: string
    endereco: string
    data_emissao?: Date | string
    status?: StatusUncheckedCreateNestedManyWithoutIdencomendaInput
    entregue?: boolean
  }

  export type EncomendaCreateOrConnectWithoutClienteIDInput = {
    where: EncomendaWhereUniqueInput
    create: XOR<EncomendaCreateWithoutClienteIDInput, EncomendaUncheckedCreateWithoutClienteIDInput>
  }

  export type EncomendaCreateManyClienteIDInputEnvelope = {
    data: Enumerable<EncomendaCreateManyClienteIDInput>
    skipDuplicates?: boolean
  }

  export type EncomendaUpsertWithWhereUniqueWithoutClienteIDInput = {
    where: EncomendaWhereUniqueInput
    update: XOR<EncomendaUpdateWithoutClienteIDInput, EncomendaUncheckedUpdateWithoutClienteIDInput>
    create: XOR<EncomendaCreateWithoutClienteIDInput, EncomendaUncheckedCreateWithoutClienteIDInput>
  }

  export type EncomendaUpdateWithWhereUniqueWithoutClienteIDInput = {
    where: EncomendaWhereUniqueInput
    data: XOR<EncomendaUpdateWithoutClienteIDInput, EncomendaUncheckedUpdateWithoutClienteIDInput>
  }

  export type EncomendaUpdateManyWithWhereWithoutClienteIDInput = {
    where: EncomendaScalarWhereInput
    data: XOR<EncomendaUpdateManyMutationInput, EncomendaUncheckedUpdateManyWithoutEncomendaInput>
  }

  export type EncomendaScalarWhereInput = {
    AND?: Enumerable<EncomendaScalarWhereInput>
    OR?: Enumerable<EncomendaScalarWhereInput>
    NOT?: Enumerable<EncomendaScalarWhereInput>
    id_encomenda?: IntFilter | number
    descricao?: StringFilter | string
    endereco?: StringFilter | string
    id_cliente?: IntFilter | number
    data_emissao?: DateTimeFilter | Date | string
    entregue?: BoolFilter | boolean
  }

  export type ClienteCreateWithoutEncomendaInput = {
    cnpj: number
    nome: string
    telefone: number
  }

  export type ClienteUncheckedCreateWithoutEncomendaInput = {
    cnpj: number
    nome: string
    telefone: number
  }

  export type ClienteCreateOrConnectWithoutEncomendaInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutEncomendaInput, ClienteUncheckedCreateWithoutEncomendaInput>
  }

  export type StatusCreateWithoutIdencomendaInput = {
    count?: number
    idterminal: TerminalCreateNestedOneWithoutStatusInput
    data?: Date | string
    descricao: string
  }

  export type StatusUncheckedCreateWithoutIdencomendaInput = {
    count?: number
    terminal: number
    data?: Date | string
    descricao: string
  }

  export type StatusCreateOrConnectWithoutIdencomendaInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutIdencomendaInput, StatusUncheckedCreateWithoutIdencomendaInput>
  }

  export type StatusCreateManyIdencomendaInputEnvelope = {
    data: Enumerable<StatusCreateManyIdencomendaInput>
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutEncomendaInput = {
    update: XOR<ClienteUpdateWithoutEncomendaInput, ClienteUncheckedUpdateWithoutEncomendaInput>
    create: XOR<ClienteCreateWithoutEncomendaInput, ClienteUncheckedCreateWithoutEncomendaInput>
  }

  export type ClienteUpdateWithoutEncomendaInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteUncheckedUpdateWithoutEncomendaInput = {
    cnpj?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: IntFieldUpdateOperationsInput | number
  }

  export type StatusUpsertWithWhereUniqueWithoutIdencomendaInput = {
    where: StatusWhereUniqueInput
    update: XOR<StatusUpdateWithoutIdencomendaInput, StatusUncheckedUpdateWithoutIdencomendaInput>
    create: XOR<StatusCreateWithoutIdencomendaInput, StatusUncheckedCreateWithoutIdencomendaInput>
  }

  export type StatusUpdateWithWhereUniqueWithoutIdencomendaInput = {
    where: StatusWhereUniqueInput
    data: XOR<StatusUpdateWithoutIdencomendaInput, StatusUncheckedUpdateWithoutIdencomendaInput>
  }

  export type StatusUpdateManyWithWhereWithoutIdencomendaInput = {
    where: StatusScalarWhereInput
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyWithoutStatusInput>
  }

  export type TerminalCreateWithoutStatusInput = {
    user: string
    descricao: string
    endereco: string
    adm: AdminCreateNestedOneWithoutTerminalInput
    password: string
  }

  export type TerminalUncheckedCreateWithoutStatusInput = {
    id_terminal?: number
    user: string
    descricao: string
    endereco: string
    admin: number
    password: string
  }

  export type TerminalCreateOrConnectWithoutStatusInput = {
    where: TerminalWhereUniqueInput
    create: XOR<TerminalCreateWithoutStatusInput, TerminalUncheckedCreateWithoutStatusInput>
  }

  export type EncomendaCreateWithoutStatusInput = {
    descricao: string
    endereco: string
    clienteID: ClienteCreateNestedOneWithoutEncomendaInput
    data_emissao?: Date | string
    entregue?: boolean
  }

  export type EncomendaUncheckedCreateWithoutStatusInput = {
    id_encomenda?: number
    descricao: string
    endereco: string
    id_cliente: number
    data_emissao?: Date | string
    entregue?: boolean
  }

  export type EncomendaCreateOrConnectWithoutStatusInput = {
    where: EncomendaWhereUniqueInput
    create: XOR<EncomendaCreateWithoutStatusInput, EncomendaUncheckedCreateWithoutStatusInput>
  }

  export type TerminalUpsertWithoutStatusInput = {
    update: XOR<TerminalUpdateWithoutStatusInput, TerminalUncheckedUpdateWithoutStatusInput>
    create: XOR<TerminalCreateWithoutStatusInput, TerminalUncheckedCreateWithoutStatusInput>
  }

  export type TerminalUpdateWithoutStatusInput = {
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    adm?: AdminUpdateOneRequiredWithoutTerminalNestedInput
    password?: StringFieldUpdateOperationsInput | string
  }

  export type TerminalUncheckedUpdateWithoutStatusInput = {
    id_terminal?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    admin?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EncomendaUpsertWithoutStatusInput = {
    update: XOR<EncomendaUpdateWithoutStatusInput, EncomendaUncheckedUpdateWithoutStatusInput>
    create: XOR<EncomendaCreateWithoutStatusInput, EncomendaUncheckedCreateWithoutStatusInput>
  }

  export type EncomendaUpdateWithoutStatusInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    clienteID?: ClienteUpdateOneRequiredWithoutEncomendaNestedInput
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaUncheckedUpdateWithoutStatusInput = {
    id_encomenda?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    id_cliente?: IntFieldUpdateOperationsInput | number
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TerminalCreateManyAdmInput = {
    id_terminal?: number
    user: string
    descricao: string
    endereco: string
    password: string
  }

  export type TerminalUpdateWithoutAdmInput = {
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateManyWithoutIdterminalNestedInput
  }

  export type TerminalUncheckedUpdateWithoutAdmInput = {
    id_terminal?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StatusUncheckedUpdateManyWithoutIdterminalNestedInput
  }

  export type TerminalUncheckedUpdateManyWithoutTerminalInput = {
    id_terminal?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateManyIdterminalInput = {
    count?: number
    encomenda: number
    data?: Date | string
    descricao: string
  }

  export type StatusUpdateWithoutIdterminalInput = {
    idencomenda?: EncomendaUpdateOneRequiredWithoutStatusNestedInput
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutIdterminalInput = {
    count?: IntFieldUpdateOperationsInput | number
    encomenda?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyWithoutStatusInput = {
    count?: IntFieldUpdateOperationsInput | number
    encomenda?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type EncomendaCreateManyClienteIDInput = {
    id_encomenda?: number
    descricao: string
    endereco: string
    data_emissao?: Date | string
    entregue?: boolean
  }

  export type EncomendaUpdateWithoutClienteIDInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUpdateManyWithoutIdencomendaNestedInput
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaUncheckedUpdateWithoutClienteIDInput = {
    id_encomenda?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUncheckedUpdateManyWithoutIdencomendaNestedInput
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EncomendaUncheckedUpdateManyWithoutEncomendaInput = {
    id_encomenda?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    entregue?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StatusCreateManyIdencomendaInput = {
    count?: number
    terminal: number
    data?: Date | string
    descricao: string
  }

  export type StatusUpdateWithoutIdencomendaInput = {
    idterminal?: TerminalUpdateOneRequiredWithoutStatusNestedInput
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutIdencomendaInput = {
    count?: IntFieldUpdateOperationsInput | number
    terminal?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}